package TokenConGUI;

import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import javax.imageio.ImageIO;

/*
* This tool use for convetring sdtid files in to Qr codes
* in order to give the user a way to install RSA softoken on mobile device 
* THIS TOOL CAN BE USE ONLY WITH ADMINS ON RSA CONSOLE ONLY
*/

/**
 *
 * @author Johai Kadosh
 */
public class MianFrame extends javax.swing.JFrame {
    
    public static String token_name;
    /**
     * Creates new form MianFrame
     */
    public MianFrame() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logo = new javax.swing.JLabel();
        broTest = new javax.swing.JTextField();
        broButtn = new javax.swing.JButton();
        OSType = new javax.swing.JComboBox();
        broButtn1 = new javax.swing.JButton();
        qrPhoto = new javax.swing.JLabel();
        SendMail = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        Settings = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Token Converter");

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TokenConGUI/Rsa_logo.png"))); // NOI18N

        broButtn.setText("Browse");
        broButtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                broButtnActionPerformed(evt);
            }
        });

        OSType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "IOS", "Android", "Windows Phone" }));

        broButtn1.setText("GO!");
        broButtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                broButtn1ActionPerformed(evt);
            }
        });

        SendMail.setText("Send as attached mail ");
        SendMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendMailActionPerformed(evt);
            }
        });

        menu.setText("File");

        Settings.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Settings.setText("Settings");
        Settings.setToolTipText("");
        Settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsActionPerformed(evt);
            }
        });
        menu.add(Settings);

        jMenuBar1.add(menu);

        edit.setText("Edit");

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        edit.add(about);

        jMenuBar1.add(edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(broTest))
                    .addComponent(OSType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(broButtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(broButtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(qrPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SendMail)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(logo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(broTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(broButtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OSType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(broButtn1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qrPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SendMail)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void broButtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_broButtnActionPerformed
        TokenChooser fc = new TokenChooser();//create new instance of brose window
        fc.configChooser();
        int returnVal = fc.getDC().showOpenDialog(MianFrame.this);
        if(returnVal == JFileChooser.APPROVE_OPTION){///find id user load file
            File file = fc.getDC().getSelectedFile();
            broTest.setText(file.getAbsolutePath());//show path of token file 
            token_name = fc.getDC().getSelectedFile().getName();
        }
        fc.getDC().setVisible(true);  
    }//GEN-LAST:event_broButtnActionPerformed
    
    private void broButtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_broButtn1ActionPerformed
        Runtime rt = Runtime.getRuntime();
        String OS = OSType.getSelectedItem().toString();
        Path toekn = FileSystems.getDefault().getPath("", broTest.getText());
        Path temp = FileSystems.getDefault().getPath("", "null");
        
        copyTheFile(broTest.getText());//copy the file to temp
        
        String cmd = "TokenConverter.exe "+token_name;
        if(OS.equals("IOS")|| OS.equals("Windows Phone")){
            cmd+=" -mobile ";
        }
        else {
            cmd+=" -android ";
        }
        cmd+=" -o tokenfile.txt";
        
        ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", "cd \null\" && " + cmd);//create the URL
        try {
            runCmd(builder);
        } catch (IOException ex) {
            Logger.getLogger(MianFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*end of URL creatation */
        String tokenURL=null;
        try {
            tokenURL = readFile("null", StandardCharsets.UTF_8);
            tokenURL = tokenURL.trim();
        } catch (IOException ex) {
            Logger.getLogger(MianFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(tokenURL != null){   
            try {
                String filePath = "null";
                File qrFile = new File(filePath);
                createqrimage(qrFile, tokenURL, 350, "png");
            } catch (WriterException ex) {
                Logger.getLogger(MianFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MianFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_broButtn1ActionPerformed

    private void SendMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendMailActionPerformed
        SendAMail.cmdBuilder();
    }//GEN-LAST:event_SendMailActionPerformed

    private void SettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SettingsActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        aboutFrame abt= new aboutFrame();
        add(abt);
        abt.setVisible(true);
    }//GEN-LAST:event_aboutActionPerformed
    
    private static String readFile(String path, Charset encoding)
            throws IOException
    {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded, encoding);
    }
    
    private static void createqrimage(File qrfile, String qrcodetext, int size,String filetype) throws WriterException, IOException {
        String myCodeText = qrcodetext;
        String filePath = qrfile.getAbsolutePath();
        String fileType = "png";
        File myFile = new File(filePath);
        try {
            Hashtable<EncodeHintType, ErrorCorrectionLevel> hintMap = new Hashtable<EncodeHintType, ErrorCorrectionLevel>();
            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);//error corr enabled
            QRCodeWriter qrCodeWriter = new QRCodeWriter();
            BitMatrix byteMatrix = qrCodeWriter.encode(myCodeText,BarcodeFormat.QR_CODE, size, size, hintMap);
            int CrunchifyWidth = byteMatrix.getWidth();
            BufferedImage image = new BufferedImage(CrunchifyWidth, CrunchifyWidth,
                    BufferedImage.TYPE_INT_RGB);
            image.createGraphics();
 
            Graphics2D graphics = (Graphics2D) image.getGraphics();
            graphics.setColor(Color.WHITE);
            graphics.fillRect(0, 0, CrunchifyWidth, CrunchifyWidth);
            graphics.setColor(Color.BLACK);
 
            for (int i = 0; i < CrunchifyWidth; i++) {//prints the dots
                for (int j = 0; j < CrunchifyWidth; j++) {
                    if (byteMatrix.get(i, j)) {
                        graphics.fillRect(i, j, 1, 1);
                    }
                }
            }
            ImageIO.write(image, fileType, myFile);
        } catch (WriterException e) {
        }
        System.out.println("\n\nYou have successfully created QR Code.");//debuging
    }
        

    /*just a simple methoed for run batch commands
    */
    public static void runCmd( ProcessBuilder builder) throws IOException{
        builder.redirectErrorStream(true);
        Process p = builder.start();
        BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        while (true) {
            line = r.readLine();
            if (line == null) { break; }
        }
    }
    
    
    
    private static void copyTheFile(String sourcePath){
        InputStream inStream = null;
        OutputStream outStream = null;
        try{
            
            File token =new File(sourcePath);
            File dest =new File("null"+token_name+"\\");
            
            inStream = new FileInputStream(token);
            outStream = new FileOutputStream(dest); // for override file content
            //outStream = new FileOutputStream(file2,<strong>true</strong>); // for append file content
            
            byte[] buffer = new byte[1024];
            
            int length;
            while ((length = inStream.read(buffer)) > 0){
                outStream.write(buffer, 0, length);
            }
            
            if (inStream != null)inStream.close();
            if (outStream != null)outStream.close();
            
        }catch(IOException e){
            e.printStackTrace();
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MianFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MianFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MianFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MianFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MianFrame frame = new MianFrame();
                setWindowPosition(frame, 0);
                frame.setVisible(true);
            }
        });
    }
    
    private static void setWindowPosition(JFrame window, int screen)
    {
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] allDevices = env.getScreenDevices();
        int topLeftX, topLeftY, screenX, screenY, windowPosX, windowPosY;
        
        if (screen < allDevices.length && screen > -1)
        {
            topLeftX = allDevices[screen].getDefaultConfiguration().getBounds().x;
            topLeftY = allDevices[screen].getDefaultConfiguration().getBounds().y;
            
            screenX  = allDevices[screen].getDefaultConfiguration().getBounds().width;
            screenY  = allDevices[screen].getDefaultConfiguration().getBounds().height;
        }
        else
        {
            topLeftX = allDevices[0].getDefaultConfiguration().getBounds().x;
            topLeftY = allDevices[0].getDefaultConfiguration().getBounds().y;
            
            screenX  = allDevices[0].getDefaultConfiguration().getBounds().width;
            screenY  = allDevices[0].getDefaultConfiguration().getBounds().height;
        }
        
        windowPosX = ((screenX - window.getWidth())  / 2) + topLeftX;
        windowPosY = ((screenY - window.getHeight()) / 2) + topLeftY;
        
        window.setLocation(windowPosX, windowPosY);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox OSType;
    private javax.swing.JButton SendMail;
    private javax.swing.JMenuItem Settings;
    private javax.swing.JMenuItem about;
    private javax.swing.JButton broButtn;
    private javax.swing.JButton broButtn1;
    private javax.swing.JTextField broTest;
    private javax.swing.JMenu edit;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel logo;
    private javax.swing.JMenu menu;
    private javax.swing.JLabel qrPhoto;
    // End of variables declaration//GEN-END:variables
}
